////////////////////////////////////////////////////////////////////////////////////////////////
// vim: set filetype=cpp autoindent noexpandtab tabstop=4 shiftwidth=4 foldmethod=marker :
// Copyright(c) Anton Povarov <anton.povarov@gmail.com>
////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MEOW__INTRUSIVE_PTR_HPP_
#define MEOW__INTRUSIVE_PTR_HPP_

#include <boost/smart_ptr/intrusive_ptr.hpp>
#include <boost/smart_ptr/intrusive_ref_counter.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////
namespace meow {
////////////////////////////////////////////////////////////////////////////////////////////////

	template<class T, class... A>
	inline boost::intrusive_ptr<T> make_intrusive(A&&... a)
	{
		return boost::intrusive_ptr<T>(new T(std::forward<A>(a)...));
	}

	template<class T, class... A>
	inline boost::intrusive_ptr<T> acquire_intrusive(A&&... a)
	{
		return boost::intrusive_ptr<T>(new T(std::forward<A>(a)...), false /* add_ref */);
	}

////////////////////////////////////////////////////////////////////////////////////////////////
} //namespace meow {
////////////////////////////////////////////////////////////////////////////////////////////////

#endif // MEOW__INTRUSIVE_PTR_HPP_
