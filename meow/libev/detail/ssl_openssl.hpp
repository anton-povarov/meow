////////////////////////////////////////////////////////////////////////////////////////////////
// vim: set filetype=cpp autoindent noexpandtab tabstop=4 shiftwidth=4 foldmethod=marker :
// (c) 2012 Anton Povarov <anton.povarov@gmail.com>
////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MEOW_LIBEV_DETAIL__SSL_OPENSSL_HPP_
#define MEOW_LIBEV_DETAIL__SSL_OPENSSL_HPP_

#include <openssl/ssl.h>

////////////////////////////////////////////////////////////////////////////////////////////////
namespace meow {
////////////////////////////////////////////////////////////////////////////////////////////////

	typedef SSL_CTX  ssl_ctx_t;
	typedef SSL      ssl_t;

	struct openssl_deleter_t {
		void operator()(ssl_t *ssl) { SSL_free(ssl); }
	};
	typedef boost::static_move_ptr<ssl_t, openssl_deleter_t> ssl_move_ptr;

	ssl_move_ptr ssl_create(ssl_ctx_t *ctx)
	{
		return ssl_move_ptr(SSL_new(ctx));
	}

////////////////////////////////////////////////////////////////////////////////////////////////

	struct openssl_ctx_deleter_t
	{
		void operator()(ssl_ctx_t *ssl_ctx) { SSL_CTX_free(ssl_ctx); }
	};
	typedef boost::static_move_ptr<ssl_ctx_t, openssl_ctx_deleter_t> ssl_ctx_move_ptr;

	inline ssl_ctx_move_ptr ssl_ctx_create(SSL_METHOD *method)
	{
		return ssl_ctx_move_ptr(SSL_CTX_new(method));
	}

////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace meow {
////////////////////////////////////////////////////////////////////////////////////////////////

#endif // MEOW_LIBEV_DETAIL__SSL_OPENSSL_HPP_

